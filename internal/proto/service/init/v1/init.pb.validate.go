// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: service/init/v1/init.proto

package initv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InitRequestMultiError, or
// nil if none found.
func (m *InitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InitRequestMultiError(errors)
	}

	return nil
}

// InitRequestMultiError is an error wrapping multiple validation errors
// returned by InitRequest.ValidateAll() if the designated constraints aren't met.
type InitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitRequestMultiError) AllErrors() []error { return m }

// InitRequestValidationError is the validation error returned by
// InitRequest.Validate if the designated constraints aren't met.
type InitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitRequestValidationError) ErrorName() string { return "InitRequestValidationError" }

// Error satisfies the builtin error interface
func (e InitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitRequestValidationError{}

// Validate checks the field values on InitResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InitResponseMultiError, or
// nil if none found.
func (m *InitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InitResponseMultiError(errors)
	}

	return nil
}

// InitResponseMultiError is an error wrapping multiple validation errors
// returned by InitResponse.ValidateAll() if the designated constraints aren't met.
type InitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitResponseMultiError) AllErrors() []error { return m }

// InitResponseValidationError is the validation error returned by
// InitResponse.Validate if the designated constraints aren't met.
type InitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitResponseValidationError) ErrorName() string { return "InitResponseValidationError" }

// Error satisfies the builtin error interface
func (e InitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitResponseValidationError{}

// Validate checks the field values on DeinitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeinitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeinitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeinitRequestMultiError, or
// nil if none found.
func (m *DeinitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeinitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeinitRequestMultiError(errors)
	}

	return nil
}

// DeinitRequestMultiError is an error wrapping multiple validation errors
// returned by DeinitRequest.ValidateAll() if the designated constraints
// aren't met.
type DeinitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeinitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeinitRequestMultiError) AllErrors() []error { return m }

// DeinitRequestValidationError is the validation error returned by
// DeinitRequest.Validate if the designated constraints aren't met.
type DeinitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeinitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeinitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeinitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeinitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeinitRequestValidationError) ErrorName() string { return "DeinitRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeinitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeinitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeinitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeinitRequestValidationError{}

// Validate checks the field values on DeinitResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeinitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeinitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeinitResponseMultiError,
// or nil if none found.
func (m *DeinitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeinitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeinitResponseMultiError(errors)
	}

	return nil
}

// DeinitResponseMultiError is an error wrapping multiple validation errors
// returned by DeinitResponse.ValidateAll() if the designated constraints
// aren't met.
type DeinitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeinitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeinitResponseMultiError) AllErrors() []error { return m }

// DeinitResponseValidationError is the validation error returned by
// DeinitResponse.Validate if the designated constraints aren't met.
type DeinitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeinitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeinitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeinitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeinitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeinitResponseValidationError) ErrorName() string { return "DeinitResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeinitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeinitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeinitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeinitResponseValidationError{}
