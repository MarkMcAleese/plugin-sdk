syntax = "proto3";
package plugin.keystore.operations.v1;

import "plugin/keystore/common/v1/common.proto";

// KeystoreInstanceKeyOperation service defines the operations available for key management
service KeystoreInstanceKeyOperation {
  // GetKey retrieves the details of a key by its ID
  rpc GetKey(GetKeyRequest) returns (GetKeyResponse);

  // CreateKey generates a new key with the specified algorithm
  rpc CreateKey(CreateKeyRequest) returns (CreateKeyResponse);

  // DeleteKey removes a key, optionally with a deletion window
  rpc DeleteKey(DeleteKeyRequest) returns (DeleteKeyResponse);

  // EnableKey activates a previously disabled key
  rpc EnableKey(EnableKeyRequest) returns (EnableKeyResponse);

  // DisableKey deactivates a key while maintaining its existence
  rpc DisableKey(DisableKeyRequest) returns (DisableKeyResponse);
}

// KeyAlgorithm defines the supported key algorithms across all operations
enum KeyAlgorithm {
  KEY_ALGORITHM_UNSPECIFIED = 0;
  KEY_ALGORITHM_AES256 = 1;
  KEY_ALGORITHM_RSA3072 = 2;
  KEY_ALGORITHM_RSA4096 = 3;
}

// RequestParameters contains the common fields needed for most key operations
message RequestParameters {
  plugin.keystore.common.v1.KeystoreInstanceConfig config = 1;
  string key_id = 2;
}

// GetKeyRequest contains parameters for key retrieval
message GetKeyRequest {
  RequestParameters parameters = 1;
}

message GetKeyResponse {
  string key_id = 1; // The ID of the retrieved key
  KeyAlgorithm algorithm = 2; // The algorithm used for the key
  string status = 3; // The current status of the key (e.g., enabled, disabled)
  string usage = 4; // The intended usage of the key (e.g., encryption, signing)
}

// CreateKeyRequest contains parameters for key creation
message CreateKeyRequest {
  plugin.keystore.common.v1.KeystoreInstanceConfig config = 1;
  KeyAlgorithm algorithm = 2;
  optional string id = 3; // Optional predefined key ID
  string region = 4; // The region in which to create the key
}

message CreateKeyResponse {
  string key_id = 1; // The ID of the created key
}

// DeleteKeyRequest contains parameters for key deletion
message DeleteKeyRequest {
  RequestParameters parameters = 1;
  optional int32 window = 2; // Optional deletion window in days
}

message DeleteKeyResponse {}

// EnableKeyRequest contains parameters for key enablement
message EnableKeyRequest {
  RequestParameters parameters = 1;
}

message EnableKeyResponse {}

// DisableKeyRequest contains parameters for key disablement
message DisableKeyRequest {
  RequestParameters parameters = 1;
}

message DisableKeyResponse {}
