// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: plugin/keystore/operations/v1/operations.proto

package operationsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeystoreInstanceKeyOperation_GetKey_FullMethodName     = "/plugin.keystore.operations.v1.KeystoreInstanceKeyOperation/GetKey"
	KeystoreInstanceKeyOperation_CreateKey_FullMethodName  = "/plugin.keystore.operations.v1.KeystoreInstanceKeyOperation/CreateKey"
	KeystoreInstanceKeyOperation_DeleteKey_FullMethodName  = "/plugin.keystore.operations.v1.KeystoreInstanceKeyOperation/DeleteKey"
	KeystoreInstanceKeyOperation_EnableKey_FullMethodName  = "/plugin.keystore.operations.v1.KeystoreInstanceKeyOperation/EnableKey"
	KeystoreInstanceKeyOperation_DisableKey_FullMethodName = "/plugin.keystore.operations.v1.KeystoreInstanceKeyOperation/DisableKey"
)

// KeystoreInstanceKeyOperationClient is the client API for KeystoreInstanceKeyOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeystoreInstanceKeyOperationClient interface {
	// GetKey retrieves the details of a key by its ID
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
	// CreateKey generates a new key with the specified algorithm
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	// DeleteKey removes a key, optionally with a deletion window
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error)
	// EnableKey activates a previously disabled key
	EnableKey(ctx context.Context, in *EnableKeyRequest, opts ...grpc.CallOption) (*EnableKeyResponse, error)
	// DisableKey deactivates a key while maintaining its existence
	DisableKey(ctx context.Context, in *DisableKeyRequest, opts ...grpc.CallOption) (*DisableKeyResponse, error)
}

type keystoreInstanceKeyOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewKeystoreInstanceKeyOperationClient(cc grpc.ClientConnInterface) KeystoreInstanceKeyOperationClient {
	return &keystoreInstanceKeyOperationClient{cc}
}

func (c *keystoreInstanceKeyOperationClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, KeystoreInstanceKeyOperation_GetKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoreInstanceKeyOperationClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	out := new(CreateKeyResponse)
	err := c.cc.Invoke(ctx, KeystoreInstanceKeyOperation_CreateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoreInstanceKeyOperationClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error) {
	out := new(DeleteKeyResponse)
	err := c.cc.Invoke(ctx, KeystoreInstanceKeyOperation_DeleteKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoreInstanceKeyOperationClient) EnableKey(ctx context.Context, in *EnableKeyRequest, opts ...grpc.CallOption) (*EnableKeyResponse, error) {
	out := new(EnableKeyResponse)
	err := c.cc.Invoke(ctx, KeystoreInstanceKeyOperation_EnableKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoreInstanceKeyOperationClient) DisableKey(ctx context.Context, in *DisableKeyRequest, opts ...grpc.CallOption) (*DisableKeyResponse, error) {
	out := new(DisableKeyResponse)
	err := c.cc.Invoke(ctx, KeystoreInstanceKeyOperation_DisableKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeystoreInstanceKeyOperationServer is the server API for KeystoreInstanceKeyOperation service.
// All implementations must embed UnimplementedKeystoreInstanceKeyOperationServer
// for forward compatibility
type KeystoreInstanceKeyOperationServer interface {
	// GetKey retrieves the details of a key by its ID
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	// CreateKey generates a new key with the specified algorithm
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	// DeleteKey removes a key, optionally with a deletion window
	DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error)
	// EnableKey activates a previously disabled key
	EnableKey(context.Context, *EnableKeyRequest) (*EnableKeyResponse, error)
	// DisableKey deactivates a key while maintaining its existence
	DisableKey(context.Context, *DisableKeyRequest) (*DisableKeyResponse, error)
	mustEmbedUnimplementedKeystoreInstanceKeyOperationServer()
}

// UnimplementedKeystoreInstanceKeyOperationServer must be embedded to have forward compatible implementations.
type UnimplementedKeystoreInstanceKeyOperationServer struct {
}

func (UnimplementedKeystoreInstanceKeyOperationServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedKeystoreInstanceKeyOperationServer) CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedKeystoreInstanceKeyOperationServer) DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedKeystoreInstanceKeyOperationServer) EnableKey(context.Context, *EnableKeyRequest) (*EnableKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableKey not implemented")
}
func (UnimplementedKeystoreInstanceKeyOperationServer) DisableKey(context.Context, *DisableKeyRequest) (*DisableKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableKey not implemented")
}
func (UnimplementedKeystoreInstanceKeyOperationServer) mustEmbedUnimplementedKeystoreInstanceKeyOperationServer() {
}

// UnsafeKeystoreInstanceKeyOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeystoreInstanceKeyOperationServer will
// result in compilation errors.
type UnsafeKeystoreInstanceKeyOperationServer interface {
	mustEmbedUnimplementedKeystoreInstanceKeyOperationServer()
}

func RegisterKeystoreInstanceKeyOperationServer(s grpc.ServiceRegistrar, srv KeystoreInstanceKeyOperationServer) {
	s.RegisterService(&KeystoreInstanceKeyOperation_ServiceDesc, srv)
}

func _KeystoreInstanceKeyOperation_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreInstanceKeyOperationServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeystoreInstanceKeyOperation_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreInstanceKeyOperationServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeystoreInstanceKeyOperation_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreInstanceKeyOperationServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeystoreInstanceKeyOperation_CreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreInstanceKeyOperationServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeystoreInstanceKeyOperation_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreInstanceKeyOperationServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeystoreInstanceKeyOperation_DeleteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreInstanceKeyOperationServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeystoreInstanceKeyOperation_EnableKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreInstanceKeyOperationServer).EnableKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeystoreInstanceKeyOperation_EnableKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreInstanceKeyOperationServer).EnableKey(ctx, req.(*EnableKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeystoreInstanceKeyOperation_DisableKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreInstanceKeyOperationServer).DisableKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeystoreInstanceKeyOperation_DisableKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreInstanceKeyOperationServer).DisableKey(ctx, req.(*DisableKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeystoreInstanceKeyOperation_ServiceDesc is the grpc.ServiceDesc for KeystoreInstanceKeyOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeystoreInstanceKeyOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.keystore.operations.v1.KeystoreInstanceKeyOperation",
	HandlerType: (*KeystoreInstanceKeyOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKey",
			Handler:    _KeystoreInstanceKeyOperation_GetKey_Handler,
		},
		{
			MethodName: "CreateKey",
			Handler:    _KeystoreInstanceKeyOperation_CreateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KeystoreInstanceKeyOperation_DeleteKey_Handler,
		},
		{
			MethodName: "EnableKey",
			Handler:    _KeystoreInstanceKeyOperation_EnableKey_Handler,
		},
		{
			MethodName: "DisableKey",
			Handler:    _KeystoreInstanceKeyOperation_DisableKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/keystore/operations/v1/operations.proto",
}
