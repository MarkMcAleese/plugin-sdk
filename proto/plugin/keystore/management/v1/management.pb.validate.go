// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugin/keystore/management/v1/management.proto

package managementv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateKeystoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateKeystoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKeystoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateKeystoreRequestMultiError, or nil if none found.
func (m *CreateKeystoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKeystoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValues()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateKeystoreRequestValidationError{
					field:  "Values",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateKeystoreRequestValidationError{
					field:  "Values",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValues()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateKeystoreRequestValidationError{
				field:  "Values",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateKeystoreRequestMultiError(errors)
	}

	return nil
}

// CreateKeystoreRequestMultiError is an error wrapping multiple validation
// errors returned by CreateKeystoreRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateKeystoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKeystoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKeystoreRequestMultiError) AllErrors() []error { return m }

// CreateKeystoreRequestValidationError is the validation error returned by
// CreateKeystoreRequest.Validate if the designated constraints aren't met.
type CreateKeystoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKeystoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKeystoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKeystoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKeystoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKeystoreRequestValidationError) ErrorName() string {
	return "CreateKeystoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKeystoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKeystoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKeystoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKeystoreRequestValidationError{}

// Validate checks the field values on CreateKeystoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateKeystoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKeystoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateKeystoreResponseMultiError, or nil if none found.
func (m *CreateKeystoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKeystoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateKeystoreResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateKeystoreResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateKeystoreResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateKeystoreResponseMultiError(errors)
	}

	return nil
}

// CreateKeystoreResponseMultiError is an error wrapping multiple validation
// errors returned by CreateKeystoreResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateKeystoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKeystoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKeystoreResponseMultiError) AllErrors() []error { return m }

// CreateKeystoreResponseValidationError is the validation error returned by
// CreateKeystoreResponse.Validate if the designated constraints aren't met.
type CreateKeystoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKeystoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKeystoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKeystoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKeystoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKeystoreResponseValidationError) ErrorName() string {
	return "CreateKeystoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKeystoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKeystoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKeystoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKeystoreResponseValidationError{}

// Validate checks the field values on DeleteKeystoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteKeystoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKeystoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteKeystoreRequestMultiError, or nil if none found.
func (m *DeleteKeystoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKeystoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteKeystoreRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteKeystoreRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteKeystoreRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteKeystoreRequestMultiError(errors)
	}

	return nil
}

// DeleteKeystoreRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteKeystoreRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteKeystoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKeystoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKeystoreRequestMultiError) AllErrors() []error { return m }

// DeleteKeystoreRequestValidationError is the validation error returned by
// DeleteKeystoreRequest.Validate if the designated constraints aren't met.
type DeleteKeystoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKeystoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKeystoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKeystoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKeystoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKeystoreRequestValidationError) ErrorName() string {
	return "DeleteKeystoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKeystoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKeystoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKeystoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKeystoreRequestValidationError{}

// Validate checks the field values on DeleteKeystoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteKeystoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKeystoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteKeystoreResponseMultiError, or nil if none found.
func (m *DeleteKeystoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKeystoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteKeystoreResponseMultiError(errors)
	}

	return nil
}

// DeleteKeystoreResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteKeystoreResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteKeystoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKeystoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKeystoreResponseMultiError) AllErrors() []error { return m }

// DeleteKeystoreResponseValidationError is the validation error returned by
// DeleteKeystoreResponse.Validate if the designated constraints aren't met.
type DeleteKeystoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKeystoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKeystoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKeystoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKeystoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKeystoreResponseValidationError) ErrorName() string {
	return "DeleteKeystoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKeystoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKeystoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKeystoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKeystoreResponseValidationError{}
