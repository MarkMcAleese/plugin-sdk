// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: plugin/authz/v1/authz.proto

package authzv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExternalAuthorization_Check_FullMethodName = "/plugin.authz.v1.ExternalAuthorization/Check"
)

// ExternalAuthorizationClient is the client API for ExternalAuthorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalAuthorizationClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type externalAuthorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalAuthorizationClient(cc grpc.ClientConnInterface) ExternalAuthorizationClient {
	return &externalAuthorizationClient{cc}
}

func (c *externalAuthorizationClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, ExternalAuthorization_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalAuthorizationServer is the server API for ExternalAuthorization service.
// All implementations must embed UnimplementedExternalAuthorizationServer
// for forward compatibility
type ExternalAuthorizationServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedExternalAuthorizationServer()
}

// UnimplementedExternalAuthorizationServer must be embedded to have forward compatible implementations.
type UnimplementedExternalAuthorizationServer struct {
}

func (UnimplementedExternalAuthorizationServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedExternalAuthorizationServer) mustEmbedUnimplementedExternalAuthorizationServer() {}

// UnsafeExternalAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalAuthorizationServer will
// result in compilation errors.
type UnsafeExternalAuthorizationServer interface {
	mustEmbedUnimplementedExternalAuthorizationServer()
}

func RegisterExternalAuthorizationServer(s grpc.ServiceRegistrar, srv ExternalAuthorizationServer) {
	s.RegisterService(&ExternalAuthorization_ServiceDesc, srv)
}

func _ExternalAuthorization_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuthorizationServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuthorization_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuthorizationServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalAuthorization_ServiceDesc is the grpc.ServiceDesc for ExternalAuthorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalAuthorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.authz.v1.ExternalAuthorization",
	HandlerType: (*ExternalAuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _ExternalAuthorization_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/authz/v1/authz.proto",
}
